#!/bin/bash
#
#  lmsh: VMware Lab Manager soap-bash tool.
#
#  Copyright (C) 2009 C. J. Meidlinger <cj@meidlinger.org>
#
#  2009-08-20:  1.0   Initial Version
#  2009-08-20:  1.1   Added ConfigSetPublicPrivate
#  2009-08-21:  1.2   Improved listings
#                     cleaned up output
#                     added debug switch
#  2009-08-26:  1.3   Added machine actions
#  2009-08-31:  1.3.1 Fixed 'ListMachines' function
#  2009-10-01:  1.4   Added media store support
#
VERSION=1.4
LMSH_CONFIG=$HOME/.lmsh
ADVERT="created by lmsh v${VERSION}"
CURL=/usr/bin/curl
XMLLINT=/usr/bin/xmllint


unset username password organization hostname command config_name net_info name

########################################################
#
#  functions
#
########################################################
function help () {
cat <<EOF

lmsh v${VERSION}: VMware Lab Manager soap-shell tool

WARNING:  This tool uses unsupported internal SOAP calls which
may not work with your version of Lab Manager.  It has been
tested against VMware Lab Manager 3.0 (3.0.2.56).

lmsh v${VERSION} options:
     -?                         # this help message
     -d                         # debug mode (shows posted XML)
     -l                         # display license (GPL v3)

   #####  Authentication Parameters #####

     -u <username>
     -p <password>
     -o <organization>
     -h <hostname>              # hostname or ip address of lab manager server

     You may also set these variables in the following file:

     $LMSH_CONFIG

     This file is read before command line options are processed, so you
     may override individual options on the command line.

   #####   Functional Parameters    #####

     -A <configuration_name>    # Add machine to configuration
          -t <template_name>    # name of source template
          -n <guest_name>       # name of virtual machine (guest)
          -i <guest_info>       # description of new virtual machine (guest)
          -0 <nic_0_info>       # comma delimited array of nic information
          -1 <nic_1_info>       # comma delimited array of nic information
	  			# (continues up to -6)
	  			#
				# array elements:
	  			# network_name,mac_address,reset_mac,ip_addressing_mode,ipaddress,netmask
				# external_ip,gateway,dns_1,dns_2,is_connected
				#
				# where ip_addressing_mode can be: NONE, STATIC_AUTOMATIC, STATIC_MANUAL,
			        # DHCP, AUTOMATIC_OR_MANUAL, AUTOMATIC_OR_DHCP, MANUAL_OR_DHCP,
			        # AUTOMATIC_OR_MANUAL_OR_DHCP

     -C <configuration_name>    # Create new configuration
          -i <info>             # description of new configuration

     -D <configuration_name>    # Deploy configuration

     -G <configuration_name>    # Get configuration information

     -L <object_type>           # List objects
          -c <context>          #
                                # object types without context: 
				# managed_servers, mediastores, datastores, configs, templates, users, or networks
				#
				# object types requiring context:
				# machines -c config_name

     -M <configuration_name>    # Modify configuration
          -a <action>           # actions:  set_public, set_private
	                        #           
	                        #           

     -P <configuration_name>    # Perform action on configuration
          -n <guest_name>       # name of virtual machine (guest)
	                        # -n is optional, without it, action is performed against
				# the whole configuration.
          -a <action>           # actions:  power_on, power_off, suspend,
	                        #           resume, reset, snapshot,
	                        #           revert, shutdown_guest

     -S				# Synchronize media stores

     -U <configuration_name>    # Undeploy configuration

     -X <configuration_name>    # Delete configuration

EOF
exit 1
}


function listConfigs () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListConfigurations xmlns=\"http://vmware.com/labmanager\">
      	<configurationType>1</configurationType>
    	</ListConfigurations>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManager.asmx | $XMLLINT -format -

}

function createConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationCreateEx xmlns=\"http://vmware.com/labmanager\">
      	<name>${config_name}</name>
      	<desc>${info}</desc>
    	</ConfigurationCreateEx>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format -
}

function deleteConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationDelete xmlns=\"http://vmware.com/labmanager\">
      	<configurationId>${config_id}</configurationId>
    	</ConfigurationDelete>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManager.asmx | $XMLLINT -format - 
}

function getConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<GetConfigurationByName xmlns=\"http://vmware.com/labmanager\">
      	<name>${config_name}</name>
    	</GetConfigurationByName>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManager.asmx | $XMLLINT -format - 

}

function getConfigID () {

	config_id=`getConfig | grep '<id>' | sed s,\>,\<,g | awk -F'<' '{print $3}'`
}

function getTemplate () {


	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<GetTemplateByName xmlns=\"http://vmware.com/labmanager\">
      	<name>${template_name}</name>
    	</GetTemplateByName>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 
}

function getTemplateID () {

	template_id=`getTemplate | grep '<id>' | sed s,\>,\<,g | awk -F'<' '{print $3}'`
}

function getNetworkTemplate () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<GetNetworkTemplateByName xmlns=\"http://vmware.com/labmanager\">
      	<name>${network_name}</name>
    	</GetNetworkTemplateByName>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 
}

function getNetworkID () {

	network_id=`getNetworkTemplate | grep '<NetID>' | sed s,\>,\<,g | awk -F'<' '{print $3}'`
}

function performActionConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationPerformAction xmlns=\"http://vmware.com/labmanager\">
      	<configurationId>${config_id}</configurationId>
      	<action>${action}</action>
    	</ConfigurationPerformAction>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManager.asmx | $XMLLINT -format - 
}

function undeployConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationUndeploy xmlns=\"http://vmware.com/labmanager\">
	<configurationId>${config_id}</configurationId>
    	</ConfigurationUndeploy>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManager.asmx | $XMLLINT -format - 

}

function addMachineConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationAddMachineEx xmlns=\"http://vmware.com/labmanager\">
      	<id>${config_id}</id>
      	<template_id>${template_id}</template_id>
      	<name>${name}</name>
      	<desc>${info}</desc>
      	<boot_seq>0</boot_seq>
      	<boot_delay>0</boot_delay>
	<netInfo>
		$net_info
	</netInfo>
    	</ConfigurationAddMachineEx>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 


}

function deployConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationDeployEx xmlns=\"http://vmware.com/labmanager\">
      	<configurationId>${config_id}</configurationId>
      	<honorBootOrder>true</honorBootOrder>
      	<startAfterDeploy>true</startAfterDeploy>
      	<fenceNetworkOptions />
      	<bridgeNetworkOptions />
    	</ConfigurationDeployEx>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function setPublicPrivateConfig () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ConfigurationSetPublicPrivate xmlns=\"http://vmware.com/labmanager\">
      	<configurationId>${config_id}</configurationId>
      	<isPublic>${action}</isPublic>
    	</ConfigurationSetPublicPrivate>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}
function listMediaStores () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListMediaStores xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function listNetworks () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListNetworks xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function listTemplates () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListTemplates xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function listUsers () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListUsers xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}


function listResourcePools () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListResourcePools xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 
}


function listDatastores () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListDatastores xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 
}


function listMachines () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListMachines xmlns=\"http://vmware.com/labmanager\">
	<configurationId>${config_id}</configurationId>
    	</ListMachines>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManager.asmx | $XMLLINT -format - 
}

function listManagedServers () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<ListManagedServers xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 
}

function getMachineID () {

	machine_id=`getMachine | grep '<id>' | sed s,\>,\<,g | awk -F'<' '{print $3}'`
}

function getMachine () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<GetMachineByName xmlns=\"http://vmware.com/labmanager\">
      	<configurationId>${config_id}</configurationId>
      	<name>${name}</name>
    	</GetMachineByName>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function performMachineAction () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>${username}</username>
      	<password>${password}</password>
      	<organizationname>${organization}</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<MachinePerformAction xmlns=\"http://vmware.com/labmanager\">
      	<machineId>${machine_id}</machineId>
      	<action>${action}</action>
    	</MachinePerformAction>
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function syncMediaStores () {

	$CURL -s -k --header 'Content-Type: application/soap+xml; charset=utf-8' --data  "
	<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
  	<soap12:Header>
    	<AuthenticationHeader xmlns=\"http://vmware.com/labmanager\">
      	<username>string</username>
      	<password>string</password>
      	<organizationname>string</organizationname>
    	</AuthenticationHeader>
  	</soap12:Header>
  	<soap12:Body>
    	<MediaSynchronize xmlns=\"http://vmware.com/labmanager\" />
  	</soap12:Body>
	</soap12:Envelope>
	"  -X POST https://${hostname}/LabManager/SOAP/LabManagerInternal.asmx | $XMLLINT -format - 

}

function displayLicense () {

cat <<EOF

    lmsh v${VERSION}: VMware Lab Manager soap-shell tool
    Copyright (C) 2009 C. J. Meidlinger <cj@meidlinger.org>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

EOF


}

########################################################
#
#  process options
#
########################################################
[ ! "$1" ] && help
[ -f "$LMSH_CONFIG" ] && . $LMSH_CONFIG
while getopts ":u:p:o:h:dlA:C:D:G:L:M:P:SU:X:0:1:2:3:4:5:6:a:c:i:n:t:?" Option
do
    case $Option in
	u)
		username=$OPTARG;;
	p)
		password=$OPTARG;;
	o)
		organization=$OPTARG;;
	h)
		hostname=$OPTARG;;
	d)
		set -x;;
	l)
		command=displayLicense;;
	A)
		command=addMachineConfig
		config_name=$OPTARG;;
	C)
		command=createConfig
		config_name=$OPTARG;;
	D)
		command=deployConfig
		config_name=$OPTARG;;
	G)
		command=getConfig
		config_name=$OPTARG;;
	L)
		command=listObjects
		list_object=$OPTARG;;
	M)
		command=modifyConfig
		config_name=$OPTARG;;
	P)
		command=performActionConfig
		config_name=$OPTARG;;
	S)
		command=syncMediaStores;;
	U)
		command=undeployConfig
		config_name=$OPTARG;;
	X)
		command=deleteConfig
		config_name=$OPTARG;;
	0|1|2|3|4|5|6)
		eval net_info_${Option}=\$OPTARG;;
	a)
		action=$OPTARG;;
	c)
		context=$OPTARG;;
	i)
		info=$OPTARG;;
	n)
		name=$OPTARG;;
	t)
		template_name=$OPTARG;;
	?|*)
		echo -e "\nUnimplemented option chosen: -$OPTARG"
		help;;
    esac
done

#shift $(($OPTIND - 1))

########################################################
#
#  main
#
########################################################
case $command in
	displayLicense)
		displayLicense;;

	listObjects)
		case $list_object in
			configs)
				listConfigs;;
			networks)
				listNetworks;;
			templates)
				listTemplates;;
			users)
				listUsers;;
			managed_servers)
				listManagedServers;;
			machines)
				config_name=$context
				getConfigID
				listMachines;;
			mediastores)
				listMediaStores;;
			datastores)
				listDatastores;;
			resource_pools)
				listResourcePools;;
		esac;;

	createConfig)
		[ ! "$info" ] && info=$ADVERT
		createConfig;;

	deleteConfig)
		getConfigID
		[ "$config_id" ] && deleteConfig;;

	getConfig)
		getConfig;;

	syncMediaStores)
		syncMediaStores;;

	performActionConfig)
		if [ ! "$action" ] ; then
			echo "ERROR: You need to supply an action with the '-a' option"
			help
		fi
		case $action in
			power_on)
				action=1;;
			power_off)
				action=2;;
			suspend)
				action=3;;
			resume)
				action=4;;
			reset)
				action=5;;
			snapshot)
				action=6;;
			revert)
				action=7;;
			shutdown_guest)
				action=8;;
			*)
				echo "ERROR:  Your action does not match the available options";;
		esac
		getConfigID
		if [ "$name" ]; then
			getMachineID
			[ "$config_id" -a "$machine_id" ] && performMachineAction
		else
			[ "$config_id" ] && performActionConfig
		fi;;
		
	undeployConfig)
		getConfigID
		[ "$config_id" ] && undeployConfig;;

	addMachineConfig)
		[ ! "$info" ] && info=$ADVERT
		getConfigID
		getTemplateID
		for vmx_slot in {0..6}; do
			network_name=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $1}'`
			if [ "$network_name" ]; then
				getNetworkID
				mac_address=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $2}'`
				reset_mac=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $3}'`
				[ ! "$reset_mac" ] && reset_mac=true
				ip_addressing_mode=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $4}'`
				[ ! "$ip_addressing_mode" ] && ip_addressing_mode=DHCP
				ipaddress=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $5}'`
				external_ip=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $6}'`
				netmask=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $7}'`
				gateway=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $8}'`
				dns_1=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $9}'`
				dns_2=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $10}'`
				is_connected=`eval echo \\$net_info_\$vmx_slot | awk -F',' '{print $11}'`
				[ ! "$is_connected" ] && is_connected=true
        			net_info="${net_info}<NetInfo><networkId>${network_id}</networkId><nicId>0</nicId><vmxSlot>${vmx_slot}</vmxSlot><macAddress>${mac_address}</macAddress><resetMac>${reset_mac}</resetMac><ipAddressingMode>${ip_addressing_mode}</ipAddressingMode><ipAddress>${ipaddress}</ipAddress><externalIpAddress>${external_ip}</externalIpAddress><netmask>${netmask}</netmask><gateway>${gateway}</gateway><dns1>${dns_1}</dns1><dns2>${dns_2}</dns2><isConnected>${is_connected}</isConnected></NetInfo>"
			fi
		done
		[ "$config_id" -a "$template_id" ] && addMachineConfig;;

	deployConfig)
		getConfigID
		[ "$config_id" ] && deployConfig;;

	modifyConfig)
		if [ ! "$action" ] ; then
			echo "ERROR: You need to supply an action with the '-a' option"
			help
		fi
		getConfigID
		case $action in
			set_public)
				action=true
				[ "$config_id" ] && setPublicPrivateConfig;;
			set_private)
				action=false
				[ "$config_id" ] && setPublicPrivateConfig;;
			*)
				echo "ERROR:  Your action does not match the available options";;
		esac;;

	*)
		exit;;
esac

exit 0
