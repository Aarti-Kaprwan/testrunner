#!/usr/bin/python

import os
import sys
sys.path.append("lib")
sys.path.append("pytests")

if sys.hexversion < 0x02060000:
    print "Testrunner requires version 2.6+ of python"
    sys.exit()

import re
import time
import unittest
import logger
import logging.config
from xunit import XUnitTestResult
from TestInput import TestInputParser, TestInputSingleton
from optparse import OptionParser, OptionGroup


def usage(err=None):
    print """\
Syntax: testrunner [options]

Examples:
  ./testrunner -i tmp/local.ini -t performance.perf.DiskDrainRate
  ./testrunner -i tmp/local.ini -t performance.perf.DiskDrainRate.test_9M
"""
    sys.exit(0)


def parse_args(argv):

    parser = OptionParser()

    parser.add_option("-q", action="store_false", dest="verbose")

    tgroup = OptionGroup(parser, "TestCase/Runlist Options")
    tgroup.add_option("-i", "--ini",
                      dest="ini", help="Path to .ini file containing server information,e.g -i tmp/local.ini")
    tgroup.add_option("-c", "--config", dest="runlist",
                      help="Config file name (located in the conf subdirectory), e.g -c py-view.conf")
    tgroup.add_option("-t", "--test",
                      dest="testcase", help="Test name (multiple -t options add more tests) e.g -t performance.perf.DiskDrainRate")
    parser.add_option_group(tgroup)

    parser.add_option("-p", "--params",
                      dest="params", help="Optional key=value parameters, comma-separated -p k=v,k2=v2,...",
                      default="")
    parser.add_option("-n", "--noop",action="store_true",
                      help="NO-OP - emit test names, but don't actually run them e.g -n true")
    parser.add_option("-l", "--log-level",
                      dest="loglevel", default="INFO",help="e.g -l info,warning,error")
    options, args = parser.parse_args()

    tests = []


    if not options.ini:
        parser.error("you need to specify a resource file")
        parser.print_help()
    if not options.testcase and not options.runlist:
        parser.error("you need to specify runlist (-c) or a test case (-t)")
        parser.print_help()
    if options.runlist:
        parse_runlist(tests,options.runlist)
    if options.testcase:
        tests.append(options.testcase)
    if options.noop:
        print("\n".join(tests))
        sys.exit(0)

    test_input = TestInputParser.get_test_input(argv)
    return tests, test_input, options.ini, options.params , options


def find_runlist(filename):
    if filename:
        if os.path.exists(filename):
            return file(filename)
        if os.path.exists("conf/" + filename):
            return file("conf/" + filename)
    return None

def create_log_file(log_config_file_name,log_file_name,level):
    tmpl_log_file = open("logging.conf.sample")
    log_file = open(log_config_file_name, "w")
    log_file.truncate()
    for line in tmpl_log_file:
        newline = line.replace("@@LEVEL@@", level)
        newline = newline.replace("@@FILENAME@@", log_file_name)
        log_file.write(newline)
    log_file.close()
    tmpl_log_file.close()


def parse_runlist(tests, filename):
    f = find_runlist(filename)
    if not f:
        usage("bad conf: " + filename)
    prefix = None
    for line in f:
        stripped = line.strip()
        if stripped.startswith("#") or len(stripped) <= 0:
            continue
        if stripped.endswith(":"):
            prefix = stripped.split(":")[0]
            continue
        name = stripped
        if line.startswith(" ") and prefix:
            name = prefix + "." + name
        prefix = ".".join(name.split(",")[0].split('.')[0:-1])
        append_test(tests, name)


def append_test(tests, name):
    prefix = ".".join(name.split(".")[0:-1])
    if name.find('*') > 0:
        for t in unittest.TestLoader().loadTestsFromName(name.rstrip('.*')):
            tests.append(prefix + '.' + t._testMethodName)
    else:
        tests.append(name)

if __name__ == "__main__":
    str_time = time.strftime("%H:%M:%S", time.localtime()).replace(":", "-")
    names, test_input, arg_i, arg_p , options = parse_args(sys.argv)

    xunit = XUnitTestResult()

    tmp_folder = "tmp-{0}".format(str_time)
    os.makedirs(tmp_folder)
    #this only works on linux/mac
    tmp_folder_abs_path = os.getcwd() + "/" + tmp_folder
    os.environ["TEMP-FOLDER"] = tmp_folder_abs_path
    print os.environ["TEMP-FOLDER"]

    results = []
    for name in names:
        #let's create temporary folder for logs and xml results
        start_time = time.time()
        argument_split = [a.strip() for a in re.split("[,]?([^,=]+)=", name)[1:]]
        params = dict(zip(argument_split[::2], argument_split[1::2]))
        log_config_filename = ""
        if params:
            log_name = tmp_folder_abs_path + "/" + name + ".log"
            log_config_filename = tmp_folder_abs_path + "/" + name + ".logging.conf"
        else:
            dotnames = name.split('.')
            log_name = tmp_folder_abs_path + "/" + dotnames[len(dotnames) - 1] + ".log"
            log_config_filename = tmp_folder_abs_path + "/" + dotnames[len(dotnames) - 1] + ".logging.conf"
        create_log_file(log_config_filename,log_name, options.loglevel)
        logging.config.fileConfig(log_config_filename)
        name = name.split(",")[0]
        print("  ./testrunner {0} {1} -t {2}".format(arg_i or "", arg_p or "", name))

        TestInputSingleton.input = TestInputParser.get_test_input(sys.argv)
        TestInputSingleton.input.test_params.update(params)
        suite = unittest.TestLoader().loadTestsFromName(name)
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        time_taken = time.time() - start_time
        if result.failures or result.errors:
            for failure in result.failures:
                test_case, failure_string = failure
                xunit.add_test(name=name, status='fail', time=time_taken,
                               errorType='membase.error', errorMessage=failure_string)
                break
            for error in result.errors:
                test_case, error_string = error
                xunit.add_test(name=name, status='fail', time=time_taken,
                               errorType='membase.error', errorMessage=error_string)
                break
            results.append({"result": "fail", "name": name})
        else:
            xunit.add_test(name=name, time=time_taken)
            results.append({"result": "pass", "name": name, "time": time_taken})
        xunit.write("{0}/report-{1}.xml".format(tmp_folder, str_time))
        xunit.print_summary()
        print "logs and results are available under {0}".format(tmp_folder)

    if "makefile" in test_input.test_params:
        #print out fail for those tests which failed and do sys.exit() error code
        fail_count = 0
        for result in results:
            if result["result"] == "fail":
                print result["name"]," fail "
                fail_count += 1
            else:
               print result["name"]," pass"
        if fail_count > 0:
            sys.exit(1)


